/*
 * Copyright Â© 2023. Mark Mussett.
 * This file is subject to the license terms contained
 * in the license file that is distributed with this file.
 */

package json2xml

import (
	"fmt"
	"github.com/project-flogo/core/activity"
	"github.com/project-flogo/core/support/test"
	"github.com/stretchr/testify/assert"
	"testing"
)

var inputOrdered = []byte(`{"TradePrice":{"price":{"#seq":0,"#text":"1"}}}`)
var inputUnordered = []byte(`{"Envelope":{"-soapenv":"http://schemas.xmlsoap.org/soap/envelope/","-stoc":"http://example.com/stockquote.xsd","Body":{"TradePrice":{"price":34.51}},"Header":""}}`)
var expectedOrdered = []byte(`<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:stoc="http://example.com/stockquote.xsd"><soapenv:Header/><soapenv:Body><stoc:TradePrice><stoc:price/></stoc:TradePrice></soapenv:Body></soapenv:Envelope>`)
var encodedXmlData = []byte(``)

func TestCreate(t *testing.T) {

	ref := activity.GetRef(&Activity{})
	act := activity.Get(ref)

	assert.NotNil(t, act)
}

func TestEvalOrdered(t *testing.T) {

	act := &Activity{}
	tc := test.NewActivityContext(act.Metadata())

	tc.SetInput("contentAsJson", inputOrdered)
	tc.SetInput("ordered", true)

	done, err := act.Eval(tc)
	if !done {
		fmt.Println(err)
	}

	var output = fmt.Sprint(tc.GetOutput("contentAsXml"))

	fmt.Println("Input    : ", string(inputOrdered))
	fmt.Println("Expected : ", string(expectedOrdered))
	fmt.Println("Actual   : ", output)

}

func TestEvalUnordered(t *testing.T) {

	act := &Activity{}
	tc := test.NewActivityContext(act.Metadata())

	tc.SetInput("contentAsJson", inputUnordered)
	tc.SetInput("ordered", false)
	done, err := act.Eval(tc)
	if !done {
		fmt.Println(err)
	}

	var output = fmt.Sprint(tc.GetOutput("contentAsXml"))

	fmt.Println("Input    : ", string(inputOrdered))
	fmt.Println("Expected : ", string(expectedOrdered))
	fmt.Println("Actual   : ", output)
}

//func TestAnyXML(t *testing.T) {
//
//	jsonObj, err := xml2json.XmlToJson(xmlData, true)
//	if err != nil {
//		assert.Error(t, err)
//	}
//
//	fmt.Println(string(jsonObj[:len(jsonObj)]))
//
//	xmlObj, err := json2xml.JsonToXml(jsonObj)
//	if err != nil {
//		assert.Error(t, err)
//	}
//
//	fmt.Println(string(xmlObj[:len(xmlObj)]))
//
//}
